# REST Client Tests for Tree Management API
# Save this file as "api-tests.http" in your VSCode
# Install "REST Client" extension by Huachao Mao

### Variables
@baseUrl = http://localhost:4444
@authToken = your-jwt-token-here

### 1. Health Check
GET {{baseUrl}}/health

###

### 2. Get All Categories
GET {{baseUrl}}/categories

###

### 3. Create Category (Admin required)
POST {{baseUrl}}/categories
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": {
    "ru": "Тестовая категория",
    "en": "Test Category", 
    "ro": "Categorie de test"
  },
  "imageUrl": "/uploads/test.jpg"
}

###

### 4. Get All Trees
GET {{baseUrl}}/trees

###

### 5. Create Tree (Admin required)
POST {{baseUrl}}/trees
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "title": {
    "ru": "Тестовое дерево",
    "en": "Test Tree",
    "ro": "Pom de test"
  },
  "description": {
    "ru": "Описание тестового дерева",
    "en": "Test tree description", 
    "ro": "Descrierea pomului de test"
  },
  "price": 100,
  "stock": 5,
  "category": "CATEGORY_ID_HERE",
  "imageUrl": "/uploads/tree.jpg"
}

###

### 6. Update Tree (Admin required)
PATCH {{baseUrl}}/trees/TREE_ID_HERE
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "title": {
    "ru": "Обновленное дерево",
    "en": "Updated Tree",
    "ro": "Pom actualizat"
  },
  "price": 150
}

###

### 7. Delete Tree (Admin required) 
DELETE {{baseUrl}}/trees/TREE_ID_HERE
Authorization: Bearer {{authToken}}

###

### 8. Test Error - Tree Not Found
GET {{baseUrl}}/trees/invalid-tree-id

###

### 9. Test Error - Update Non-existent Tree
PATCH {{baseUrl}}/trees/invalid-tree-id
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "price": 200
}

###

### 10. Test Error - Create Tree without required fields
POST {{baseUrl}}/trees
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "title": {
    "ru": "Неполное дерево"
  }
}

###

### 11. Test Error - Invalid price
POST {{baseUrl}}/trees
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "title": {
    "ru": "Дерево с неверной ценой",
    "en": "Tree with invalid price",
    "ro": "Pom cu preț invalid"
  },
  "description": {
    "ru": "Описание",
    "en": "Description",
    "ro": "Descriere"
  },
  "price": -10,
  "category": "CATEGORY_ID_HERE"
}

###

### 12. Test Different Languages (Russian)
POST {{baseUrl}}/trees
Content-Type: application/json
Authorization: Bearer {{authToken}}
Accept-Language: ru

{
  "title": {
    "ru": "Дерево без цены"
  }
}

###

### 13. Test Different Languages (English)
POST {{baseUrl}}/trees
Content-Type: application/json
Authorization: Bearer {{authToken}}
Accept-Language: en

{
  "title": {
    "ru": "Tree without price"
  }
}

###

### 14. Test Different Languages (Romanian)
POST {{baseUrl}}/trees
Content-Type: application/json
Authorization: Bearer {{authToken}}
Accept-Language: ro

{
  "title": {
    "ru": "Pom fără preț"
  }
}

###

### 15. Register User
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "fullName": "Test User",
  "email": "test@example.com",
  "password": "password123",
  "language": "en"
}

###

### 16. Login User
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "password123"
}

###

### 17. Get Current User
GET {{baseUrl}}/auth/me
Authorization: Bearer {{authToken}}

###

### 18. Get Reviews
GET {{baseUrl}}/api/reviews

###

### 19. Create Review (Auth required)
POST {{baseUrl}}/api/reviews
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Test Reviewer",
  "rating": 5,
  "comment": "Great tree!"
}

###

### 20. Upload Image Test
POST {{baseUrl}}/upload
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary

------WebKitFormBoundary
Content-Disposition: form-data; name="image"; filename="test.jpg"
Content-Type: image/jpeg

< ./path/to/test/image.jpg
------WebKitFormBoundary--

###