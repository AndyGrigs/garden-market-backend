// utils/createAdmin.js - –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø
import mongoose from 'mongoose';
import bcrypt from 'bcrypt';
import dotenv from 'dotenv';
import UserModel from '../models/user.js';

// ‚úÖ FIX: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env —Ñ–∞–π–ª
dotenv.config();

async function createAdmin() {
  try {
    // ‚úÖ FIX: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î DATABASE_URL
    const DATABASE_URL = process.env.DATABASE_URL;
    
    if (!DATABASE_URL) {
      console.error('‚ùå DATABASE_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!');
      console.log('üí° –°—Ç–≤–æ—Ä–∏ .env —Ñ–∞–π–ª –∑ DATABASE_URL=mongodb://localhost:27017/your-db-name');
      process.exit(1);
    }

    console.log('üîó –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—å –¥–æ –±–∞–∑–∏:', DATABASE_URL);
    
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
    await mongoose.connect(DATABASE_URL);
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');

    // –î–∞–Ω—ñ –¥–ª—è admin –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const adminData = {
      fullName: 'Admin User',
      email: 'andygrigs88@gmail.com', // ‚úÖ –¢–≤—ñ–π email
      password: '111222', // ‚úÖ –¢–≤—ñ–π –ø–∞—Ä–æ–ª—å
      role: 'admin',
      isVerified: true,
      language: 'uk'
    };

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î admin
    const existingAdmin = await UserModel.findOne({ 
      email: adminData.email 
    });

    if (existingAdmin) {
      console.log('üë§ Admin –≤–∂–µ exists:', existingAdmin.email);
      
      // ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–ª—å —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      if (existingAdmin.role !== 'admin') {
        existingAdmin.role = 'admin';
        await existingAdmin.save();
        console.log('‚úÖ –†–æ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ admin');
      } else {
        console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î —Ä–æ–ª—å admin');
      }
    } else {
      // –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
      const saltRounds = 10;
      const passwordHash = await bcrypt.hash(adminData.password, saltRounds);

      // –°—Ç–≤–æ—Ä—é—î–º–æ admin –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const admin = new UserModel({
        fullName: adminData.fullName,
        email: adminData.email,
        passwordHash: passwordHash,
        role: adminData.role,
        isVerified: adminData.isVerified,
        language: adminData.language
      });

      await admin.save();
      console.log('‚úÖ Admin –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ:', admin.email);
    }

    console.log('üéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä –º–æ–∂–µ—à –ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—è —è–∫ admin:');
    console.log('üìß Email:', adminData.email);
    console.log('üîê –ü–∞—Ä–æ–ª—å:', adminData.password);
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è admin:', error);
  } finally {
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    await mongoose.connection.close();
    console.log('üîå –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ MongoDB –∑–∞–∫—Ä–∏—Ç–æ');
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
createAdmin();